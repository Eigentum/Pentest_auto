import requests
import json
import os
import datetime
import difflib  # 응답 비교용 라이브러리

def create_log_file():
    """로그 파일 생성"""
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M")
    log_filename = f"logs/SQLi_result_{timestamp}.txt"
    os.makedirs("logs", exist_ok=True)
    with open(log_filename, 'w') as log_file:
        log_file.write(f"[INFO] Log file created at {timestamp}\n")
    return log_filename

def load_config():
    """settings.json 파일 로드"""
    config_path = os.path.join("config", "settings.json")
    try:
        with open(config_path, 'r', encoding='utf-8') as config_file:
            return json.load(config_file)
    except FileNotFoundError:
        print("[ERROR] settings.json not found.")
    except json.JSONDecodeError:
        print("[ERROR] Invalid JSON format in settings.json.")
    return None

def compare_responses(original, tested):
    """응답 내용 비교"""
    diff = difflib.SequenceMatcher(None, original, tested)
    return diff.ratio()  # 일치율 반환 (1.0에 가까울수록 동일)

def test_sqli(base_url, login_paths, login_params, sqli_payloads, detection_patterns, log_file):
    """SQLi 테스트 실행"""
    print("[INFO] Starting SQL Injection tests...")
    with open(log_file, 'a') as log:
        log.write("[INFO] Starting SQL Injection tests...\n")
        
        for path in login_paths:
            target_url = f"{base_url.rstrip('/')}{path}"
            # 정상 요청 (Baseline Response)
            baseline_data = {login_params["username"][0]: "test", login_params["password"][0]: "test"}
            try:
                baseline_response = requests.post(target_url, data=baseline_data, timeout=10)
                baseline_content = baseline_response.text
            except requests.RequestException as e:
                print(f"[ERROR] Failed to get baseline response: {e}")
                log.write(f"[ERROR] Failed to get baseline response: {e}\n")
                continue

            for username_field in login_params["username"]:
                for password_field in login_params["password"]:
                    for payload in sqli_payloads:
                        data = {username_field: payload, password_field: "test"}
                        try:
                            response = requests.post(target_url, data=data, timeout=10)
                            response_time = response.elapsed.total_seconds()
                            response_content = response.text

                            # 응답 코드 출력
                            #print(f"[INFO] Testing payload: {payload} | Response Code: {response.status_code}")
                            #log.write(f"[INFO] Testing payload: {payload} | Response Code: {response.status_code}\n")

                            # 에러 메시지 탐지 (탐지된 키워드 표시)
                            for keyword in detection_patterns["sql_error_keywords"]:
                                if keyword in response_content.lower():
                                    print(f"[VULNERABLE] SQL Error detected: '{keyword}' found in response for payload: {payload}")
                                    log.write(f"[VULNERABLE] SQL Error detected: '{keyword}' found in response for payload: {payload}\n")

                            # 시간 기반 SQLi 탐지
                            if "SLEEP" in payload.upper() and response_time > 5:
                                print(f"[VULNERABLE] Time-based SQLi detected: Response delayed {response_time} seconds for payload: {payload}")
                                log.write(f"[VULNERABLE] Time-based SQLi detected: Response delayed {response_time} seconds for payload: {payload}\n")

                            # 페이지 내용 비교
                            similarity = compare_responses(baseline_content, response_content)
                            if similarity < 0.9:  # 90% 미만 일치율
                                print(f"[VULNERABLE] Page content anomaly detected: Similarity={similarity:.2f} for payload: {payload}")
                                log.write(f"[VULNERABLE] Page content anomaly detected: Similarity={similarity:.2f} for payload: {payload}\n")

                        except requests.RequestException as e:
                            print(f"[ERROR] Failed to test payload: {payload} | Error: {e}")
                            log.write(f"[ERROR] Failed to test payload: {payload} | Error: {e}\n")

if __name__ == "__main__":
    config = load_config()
    if not config:
        exit("[ERROR] Failed to load configuration.")

    log_file = create_log_file()
    base_url = config.get("base_url")
    login_paths = config.get("login_paths", [])
    login_params = config.get("login_params", {})
    sqli_payloads = config.get("attack_patterns", {}).get("SQLi", [])
    detection_patterns = config.get("detection_patterns", {})

    if not (base_url and login_paths and login_params and sqli_payloads and detection_patterns):
        exit("[ERROR] Missing required configurations in settings.json.")

    test_sqli(base_url, login_paths, login_params, sqli_payloads, detection_patterns, log_file)
