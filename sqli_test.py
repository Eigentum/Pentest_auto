import requests
import json
import os
import datetime
from urllib.parse import urlparse

def create_log_file():
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M")
    log_filename = f"logs/sqli_result_{timestamp}.txt"
    os.makedirs("logs", exist_ok=True)
    with open(log_filename, 'w') as log_file:
        log_file.write(f"[INFO] Log file created at {timestamp}\n")
    return log_filename

def load_config():
    config_path = os.path.join("config", "settings.json")
    try:
        with open(config_path, 'r', encoding='utf-8') as config_file:
            return json.load(config_file)
    except FileNotFoundError:
        print("[ERROR] settings.json not found.")
    except json.JSONDecodeError:
        print("[ERROR] Invalid JSON format in settings.json.")
    return None

def test_login_sqli(base_url, login_paths, login_params, sqli_payloads, detection_patterns, log_file):
    print("[INFO] Starting Login SQL Injection tests...")
    with open(log_file, 'a') as log:
        log.write("[INFO] Starting Login SQL Injection tests...\n")

        for path in login_paths:
            target_url = f"{base_url.rstrip('/')}{path}"
            for username_field in login_params["username"]:
                for password_field in login_params["password"]:
                    for payload in sqli_payloads:
                        data = {username_field: payload, password_field: "test"}
                        try:
                            response = requests.post(target_url, data=data, timeout=10, allow_redirects=False)
                            status_code = response.status_code
                            response_time = response.elapsed.total_seconds()
                            response_content = response.text

                            print(f"[INFO] Testing payload: {payload} | Response Code: {status_code} | Target: {target_url}")
                            log.write(f"[INFO] Testing payload: {payload} | Response Code: {status_code} | Target: {target_url}\n")

                            if response.status_code == 302 and "Location" in response.headers:
                                location = response.headers["Location"]
                                print(f"[VULNERABLE] SQL Injection detected (Redirected to: {location}) with payload: {payload}")
                                log.write(f"[VULNERABLE] SQL Injection detected (Redirected to: {location}) with payload: {payload}\n")
                                continue

                            if any(keyword.lower() in response_content.lower() for keyword in detection_patterns["login_success_keywords"]):
                                print(f"[VULNERABLE] Login SQLi Success: {payload}")
                                log.write(f"[VULNERABLE] Login SQLi Success: {payload}\n")

                            if any(keyword.lower() in response_content.lower() for keyword in detection_patterns["sql_error_keywords"]):
                                print(f"[VULNERABLE] SQL Error detected with payload: {payload}")
                                log.write(f"[VULNERABLE] SQL Error detected with payload: {payload}\n")
                            
                            if "SLEEP" in payload.upper() and response_time > 5:
                                print(f"[VULNERABLE] Time-based SQL Injection detected with payload: {payload}")
                                log.write(f"[VULNERABLE] Time-based SQL Injection detected with payload: {payload}\n")

                        except requests.RequestException as e:
                            print(f"[ERROR] Failed to test payload: {payload} | Error: {e}")
                            log.write(f"[ERROR] Failed to test payload: {payload} | Error: {e}\n")

def test_search_sqli(base_url, search_paths, search_params, sqli_payloads, detection_patterns, log_file):
    print("[INFO] Starting Search SQL Injection tests...")
    with open(log_file, 'a') as log:
        log.write("[INFO] Starting Search SQL Injection tests...\n")

        for path in search_paths:
            target_url = f"{base_url.rstrip('/')}{path}"
            for query_param in search_params["query"]:
                for payload in sqli_payloads:
                    params = {query_param: payload}
                    try:
                        response = requests.get(target_url, params=params, timeout=10)
                        response_content = response.text

                        print(f"[INFO] Testing Search SQLi payload: {payload} | Target: {target_url}?{query_param}={payload}")
                        log.write(f"[INFO] Testing Search SQLi payload: {payload} | Target: {target_url}?{query_param}={payload}\n")

                        if any(keyword.lower() in response_content.lower() for keyword in detection_patterns["sql_error_keywords"]):
                            print(f"[VULNERABLE] SQL Error detected in Search with payload: {payload}")
                            log.write(f"[VULNERABLE] SQL Error detected in Search with payload: {payload}\n")

                    except requests.RequestException as e:
                        print(f"[ERROR] Failed to test payload: {payload} | Error: {e}")
                        log.write(f"[ERROR] Failed to test payload: {payload} | Error: {e}\n")

def run_sqli_tests():
    config = load_config()
    if not config:
        exit("[ERROR] Failed to load configuration.")

    log_file = create_log_file()
    base_url = config.get("base_url")
    login_paths = config.get("login_paths", [])
    login_params = config.get("login_params", {})
    search_paths = config.get("search_paths", [])
    search_params = config.get("search_params", {})
    sqli_payloads = config.get("attack_patterns", {}).get("SQLi", [])
    detection_patterns = config.get("detection_patterns", {})

    if not (base_url and login_paths and login_params and sqli_payloads):
        exit("[ERROR] Missing required configurations for Login SQLi in settings.json.")
    
    if not (search_paths and search_params):
        exit("[ERROR] Missing required configurations for Search SQLi in settings.json.")

    
    test_login_sqli(base_url, login_paths, login_params, sqli_payloads, detection_patterns, log_file)
    test_search_sqli(base_url, search_paths, search_params, sqli_payloads, detection_patterns, log_file)

if __name__ == "__main__":
    run_sqli_tests()
