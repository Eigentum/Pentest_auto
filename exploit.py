import requests
import json

def load_config():
    json_file_name = "config/settings.json"
    try:
        with open(json_file_name, 'r', encoding='utf-8') as json_file:
            return json.load(json_file)
    except FileNotFoundError:
        print("[ERROR] JSON file not found.")
    except json.JSONDecodeError:
        print("[ERROR] Invalid JSON format.")
    return None

def test_url_attacks(base_url, param_name, attack_patterns, log_file):
    print(f"\n[INFO] Testing URL-based attacks for parameter '{param_name}'...")
    with open(log_file, 'a') as log:
        log.write(f"\n[INFO] Testing URL-based attacks for parameter '{param_name}':\n")

        for attack_type, payloads in attack_patterns.items():
            print(f"\n[INFO] Testing {attack_type} attacks...")
            log.write(f"\n[INFO] Testing {attack_type} attacks:\n")
            for payload in payloads:
                test_url = f"{base_url}?{param_name}={payload}"
                try:
                    response = requests.get(test_url, timeout=5)
                    status_code = response.status_code
                    print(f"[TESTED] {test_url} - Response: {status_code}")
                    log.write(f"[TESTED] {test_url} - Response: {status_code}\n")

                    if attack_type == "Path Traversal" and "root:" in response.text:
                        print(f"[WARNING] Potential Path Traversal vulnerability detected: {test_url}")
                        log.write(f"[WARNING] Potential Path Traversal vulnerability detected: {test_url}\n")
                    elif attack_type == "SQLi" and "syntax" in response.text.lower():
                        print(f"[WARNING] Potential SQLi Injection detected: {test_url}")
                        log.write(f"[WARNING] Potential SQLi Injection detected: {test_url}\n")
                    elif attack_type == "Command Injection" and "uid=" in response.text:
                        print(f"[WARNING] Potential Command Injection detected: {test_url}")
                        log.write(f"[WARNING] Potential Command Injection detected: {test_url}")

                except requests.RequestException as e :
                    print(f"[ERROR] Request failed for {test_url}: {e}")
                    log.write(f"[ERROR] Request failed for {test_url}: {e}\n")

def run_exploit(log_file):
    config = load_config()
    if not config:
        return
    
    base_url = config.get("base_url")
    vulnerable_params = config.get("url_params", [])
    attack_patterns = config.get("attack_patterns", {})

    if not base_url or not vulnerable_params or not attack_patterns:
        print("[ERROR] Base URL, parameters, or attack patterns are missing in settings.json.")
        return

    for param in vulnerable_params:
        test_url_attacks(base_url, param, attack_patterns, log_file)
