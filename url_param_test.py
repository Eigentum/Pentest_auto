import requests
import os
import json
import datetime
from urllib.parse import urlparse, urljoin

def create_log_file():
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M")
    log_filename = f"logs/URL_test_result_{timestamp}.txt"
    os.makedirs("logs", exist_ok=True)
    with open(log_filename, 'w') as log_file:
        log_file.write(f"[INFO] Log file created at {timestamp}\n")
    return log_filename

def load_config():
    json_file_name = os.path.join("config/settings.json")
    absolute_path = os.path.abspath(json_file_name)

    try:
        with open(absolute_path, 'r', encoding='utf-8') as json_file:
            return json.load(json_file)
    except FileNotFoundError:
        print("[ERROR] JSON file not found.")
    except json.JSONDecodeError:
        print("[ERROR] Invalid JSON format.")
    return None

def detect_vulnerability(attack_type, response, detection_patterns, target_url, log):
    response_text = response.text.lower()
    if attack_type == "SQLi" and any(keyword in response_text for keyword in detection_patterns["sql_error_keywords"]):
        print(f"[VULNERABLE] SQL Injection detected: {target_url}")
        log.write(f"[VULNERABLE] SQL Injection detected: {target_url}\n")
    if attack_type == "Path Traversal" and any(keyword in response.text for keyword in detection_patterns["path_traversal_keywords"]):
        print(f"[VULNERABLE] Path Traversal vulnerability detected: {target_url}")
        log.write(f"[VULNERABLE] Path Traversal vulnerability detected: {target_url}\n")
    if attack_type == "Command Injection" and any(keyword in response.text for keyword in detection_patterns["command_injection_keywords"]):
        print(f"[VULNERABLE] Command Injection detected: {target_url}")
        log.write(f"[VULNERABLE] Command Injection detected: {target_url}\n")
    if attack_type == "File Inclusion" and any(keyword in response_text for keyword in detection_patterns["file_inclusion_keywords"]):
        print(f"[VULNERABLE] File Inclusion vulnerability detected: {target_url}")
        log.write(f"[VULNERABLE] File Inclusion vulnerability detected: {target_url}\n")
    if attack_type == "Open Redirect" and "location" in response.headers:
        redirected_url = response.headers["Location"]
        parsed_base = urlparse(target_url)
        parsed_redirect = urlparse(redirected_url)
        if parsed_base.netloc != parsed_redirect.netloc:
            print(f"[VULNERABLE] Open Redirect detected: {target_url} -> {redirected_url}")
            log.write(f"[VULNERABLE] Open Redirect detected: {target_url} -> {redirected_url}\n")

def test_url_attacks(base_url, attack_patterns, params, log_file, dir_paths, detection_patterns):
    print("\n[INFO] Starting URL attack testing...")
    log.write("\n[INFO] Starting URL attack testing...\n")

    for dir_path in dir_paths:
        target_url_base = os.path.join(base_url, dir_path).rstrip("/")
        for param in params:
                for attack_type, payloads in attack_patterns.items():
                    for payload in payloads:
                        target_url = f"{target_url_base}?{param}={payload}"
                        try:
                            response = requests.get(target_url, timeout=5)
                            print(f"[INFO] Testing {target_url}")
                            log.write(f"[INFO] Testing {target_url}\n")
                            detect_vulnerability(attack_type, response, detection_patterns, target_url, log)
                        except requests.RequestException as e:
                            print(f"[ERROR] Request failed for {target_url}: {e}")
                            log.write(f"[ERROR] Request failed for {target_url}: {e}\n")

def test_post_attacks(base_url, attack_patterns, params, log_file, dir_paths, detection_patterns):
    print("\n[INFO] Starting POST attack testing...")
    with open(log_file, 'a') as log:
        log.write("\n[INFO] Starting POST attack testing...\n")

        for dir_path in dir_paths:
            target_url = urljoin(base_url, dir_path)
            for param in params:
                for attack_type, payloads in attack_patterns.items():
                    for payload in payloads:
                        data = {param: payload}
                        try:
                            response = requests.post(target_url, data=data, timeout=10)
                            print(f"[INFO] Testing POST to {target_url} with {param}={payload}")
                            log.write(f"[INFO] Testing POST to {target_url} with {param}={payload}\n")
                            detect_vulnerability(attack_type, response, detection_patterns, target_url, log)
                        except requests.RequestException as e:
                            print(f"[ERROR] Failed to send POST to {target_url}: {e}")
                            log.write(f"[ERROR] Failed to send POST to {target_url}: {e}\n")

def run_exploit(log_file):
    config = load_config()
    if not config:
        return
    
    base_url = config.get("base_url")
    if not base_url:
        print("[ERROR] Base URL is not defined in the configuration file.")
        return

    params = config.get("url_params", [])
    dir_paths = config.get("dir_paths", [])
    attack_patterns = config.get("attack_patterns", {})
    detection_patterns = config.get("detection_patterns", {})

    print("==========================================")
    print("================= Exploit ================")
    print("==========================================")
    if not base_url or not params or not attack_patterns:
        print("[ERROR] Base URL, parameters, or attack patterns are missing in settings.json.")
        return

    test_url_attacks(base_url, attack_patterns, params, log_file, dir_paths, detection_patterns)
    test_post_attacks(base_url, attack_patterns, params, log_file, dir_paths, detection_patterns)

if __name__ == "__main__":
    log_file = create_log_file()
    with open(log_file, 'w') as log:
        log.write("[INFO] Exploit log initialized.\n")
        run_exploit(log)
